<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<!-- log4j配置已经移动到web.xml，这个log4j加载主要是针对单元测试的 -->
	<bean id="log4jInitializer"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod">
			<value>org.springframework.util.Log4jConfigurer.initLogging</value>
		</property>
		<property name="arguments">
			<list>
				<value>classpath:cn/gou23/resource/log4j/log4j.xml</value>
			</list>
		</property>
	</bean>

	<!-- 开启注解支持 ，将会对注解进行处理 -->
	<context:annotation-config />
	<!-- 开启自动代理，自动代理是指Spring会判断一个bean是否使用了一个或多个切面通知，并据此自动生成相应的代理以拦截其方法调用，并且确认通知是否如期进行。 
		如果想强制使用CGLIB代理，需要将 <aop:aspectj-autoproxy> 的 proxy-target-class 属性设为true。 
		我们只使用jdk proxy -->
	<aop:aspectj-autoproxy proxy-target-class="false" />
	<!-- 扫描的包，spring将自动扫描这些包，根据其的注解配置，自动进行配置 -->
	<context:component-scan base-package="cn.gou23.dao, cn.gou23.service" />
	<!-- 注解驱动开启，对注解方式的事物进行支持 -->
	<tx:annotation-driven mode="proxy"
		transaction-manager="transactionManager" />

	<!-- 属性配置文件读取 -->
	<bean id="annotationPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:cn/gou23/resource/jdbc/jdbc.properties
				</value>
			</list>
		</property>
	</bean>

	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${connection.driver_class}" />
		<property name="jdbcUrl" value="${jdbc.connection.url}" />
		<property name="idleConnectionTestPeriod"
			value="${jdbc.pool.c3p0.idle_connection_test_period}" />
		<property name="preferredTestQuery" value="${jdbc.pool.c3p0.preferred_test_query}" />
		<property name="maxIdleTime" value="${jdbc.pool.c3p0.max_idle_time}" />
		<property name="properties">
			<props>
				<prop key="user">${jdbc.connection.username}</prop>
				<prop key="password">${jdbc.connection.password}</prop>
				<prop key="c3p0.acquire_increment">${jdbc.pool.c3p0.acquire_increment}</prop>
				<prop key="c3p0.max_size">${jdbc.pool.c3p0.max_size}</prop>
				<prop key="c3p0.min_size">${jdbc.pool.c3p0.min_size}</prop>
			</props>
		</property>
	</bean>

	<!-- mybatis session factory session factory会创建调用crateObject来创建dao -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation"
			value="classpath:cn/gou23/resource/mybatis/SqlMapConfig.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 事物管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 会扫描basePackage属性配置的包路径 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
		<property name="basePackage" value="cn.gou23.dao" />
	</bean>
	<!-- <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"> 
		<property name="basenames"> <list> <value>cn/gou23/resource/message/security 
		</value> </list> </property> </bean> -->
	<!-- <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha"> 
		<property name="config"> <bean class="com.google.code.kaptcha.util.Config"> 
		<constructor-arg type="java.util.Properties"> <props> <prop key="kaptcha.image.width">300</prop> 
		<prop key="kaptcha.image.height">25</prop> <prop key="kaptcha.textproducer.char.string">23456789abcdefghijkmnpqrst</prop> 
		<prop key="kaptcha.textproducer.char.length">4</prop> </props> </constructor-arg> 
		</bean> </property> </bean> -->

	<bean id="aiTaobaoJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="cn.gou23.job.AiTaobaoJob" />
		</property>
		<property name="targetMethod" value="run" />
		<property name="concurrent" value="false" /><!-- 作业不并发调度 -->
	</bean>

	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="aiTaobaoJob" />
		<!-- 从左到右分别是：秒，分，时，月的某天，月，星期的某天，年，年可以不指定 -->
		<property name="cronExpression" value="12 57/30 0-23 * * ?" />
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
	</bean>
</beans>